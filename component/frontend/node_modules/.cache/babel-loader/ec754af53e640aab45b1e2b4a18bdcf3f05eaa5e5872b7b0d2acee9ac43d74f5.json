{"ast":null,"code":"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* eslint-disable brace-style */\nimport * as flatbuffers from 'flatbuffers';\nimport { Schema as _Schema } from '../../fb/schema.mjs';\nimport { Int as _Int } from '../../fb/int.mjs';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.mjs';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.mjs';\nimport { Buffer as _Buffer } from '../../fb/buffer.mjs';\nimport { Field as _Field } from '../../fb/field.mjs';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.mjs';\nimport { Type } from '../../fb/type.mjs';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.mjs';\nimport { Endianness as _Endianness } from '../../fb/endianness.mjs';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.mjs';\nimport { Decimal as _Decimal } from '../../fb/decimal.mjs';\nimport { Date as _Date } from '../../fb/date.mjs';\nimport { Time as _Time } from '../../fb/time.mjs';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.mjs';\nimport { Interval as _Interval } from '../../fb/interval.mjs';\nimport { Union as _Union } from '../../fb/union.mjs';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.mjs';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.mjs';\nimport { Map as _Map } from '../../fb/map.mjs';\nimport { Message as _Message } from '../../fb/message.mjs';\nimport { Schema, Field } from '../../schema.mjs';\nimport { toUint8Array } from '../../util/buffer.mjs';\nimport { bigIntToNumber } from '../../util/bigint.mjs';\nimport { MessageHeader, MetadataVersion } from '../../enum.mjs';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.mjs';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.mjs';\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32 } from '../../type.mjs';\n/**\n * @ignore\n * @private\n **/\nexport class Message {\n  /** @nocollapse */\n  static fromJSON(msg, headerType) {\n    const message = new Message(0, MetadataVersion.V4, headerType);\n    message._createHeader = messageHeaderFromJSON(msg, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static decode(buf) {\n    buf = new ByteBuffer(toUint8Array(buf));\n    const _message = _Message.getRootAsMessage(buf);\n    const bodyLength = _message.bodyLength();\n    const version = _message.version();\n    const headerType = _message.headerType();\n    const message = new Message(bodyLength, version, headerType);\n    message._createHeader = decodeMessageHeader(_message, headerType);\n    return message;\n  }\n  /** @nocollapse */\n  static encode(message) {\n    const b = new Builder();\n    let headerOffset = -1;\n    if (message.isSchema()) {\n      headerOffset = Schema.encode(b, message.header());\n    } else if (message.isRecordBatch()) {\n      headerOffset = RecordBatch.encode(b, message.header());\n    } else if (message.isDictionaryBatch()) {\n      headerOffset = DictionaryBatch.encode(b, message.header());\n    }\n    _Message.startMessage(b);\n    _Message.addVersion(b, MetadataVersion.V4);\n    _Message.addHeader(b, headerOffset);\n    _Message.addHeaderType(b, message.headerType);\n    _Message.addBodyLength(b, BigInt(message.bodyLength));\n    _Message.finishMessageBuffer(b, _Message.endMessage(b));\n    return b.asUint8Array();\n  }\n  /** @nocollapse */\n  static from(header) {\n    let bodyLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (header instanceof Schema) {\n      return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n    }\n    if (header instanceof RecordBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n    }\n    if (header instanceof DictionaryBatch) {\n      return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n    }\n    throw new Error(`Unrecognized Message header: ${header}`);\n  }\n  get type() {\n    return this.headerType;\n  }\n  get version() {\n    return this._version;\n  }\n  get headerType() {\n    return this._headerType;\n  }\n  get bodyLength() {\n    return this._bodyLength;\n  }\n  header() {\n    return this._createHeader();\n  }\n  isSchema() {\n    return this.headerType === MessageHeader.Schema;\n  }\n  isRecordBatch() {\n    return this.headerType === MessageHeader.RecordBatch;\n  }\n  isDictionaryBatch() {\n    return this.headerType === MessageHeader.DictionaryBatch;\n  }\n  constructor(bodyLength, version, headerType, header) {\n    this._version = version;\n    this._headerType = headerType;\n    this.body = new Uint8Array(0);\n    header && (this._createHeader = () => header);\n    this._bodyLength = bigIntToNumber(bodyLength);\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n  get nodes() {\n    return this._nodes;\n  }\n  get length() {\n    return this._length;\n  }\n  get buffers() {\n    return this._buffers;\n  }\n  constructor(length, nodes, buffers) {\n    this._nodes = nodes;\n    this._buffers = buffers;\n    this._length = bigIntToNumber(length);\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n  get id() {\n    return this._id;\n  }\n  get data() {\n    return this._data;\n  }\n  get isDelta() {\n    return this._isDelta;\n  }\n  get length() {\n    return this.data.length;\n  }\n  get nodes() {\n    return this.data.nodes;\n  }\n  get buffers() {\n    return this.data.buffers;\n  }\n  constructor(data, id) {\n    let isDelta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this._data = data;\n    this._isDelta = isDelta;\n    this._id = bigIntToNumber(id);\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n  constructor(offset, length) {\n    this.offset = bigIntToNumber(offset);\n    this.length = bigIntToNumber(length);\n  }\n}\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n  constructor(length, nullCount) {\n    this.length = bigIntToNumber(length);\n    this.nullCount = bigIntToNumber(nullCount);\n  }\n}\n/** @ignore */\nfunction messageHeaderFromJSON(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.fromJSON(message);\n      case MessageHeader.RecordBatch:\n        return RecordBatch.fromJSON(message);\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.fromJSON(message);\n    }\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\n/** @ignore */\nfunction decodeMessageHeader(message, type) {\n  return () => {\n    switch (type) {\n      case MessageHeader.Schema:\n        return Schema.decode(message.header(new _Schema()));\n      case MessageHeader.RecordBatch:\n        return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n      case MessageHeader.DictionaryBatch:\n        return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n    }\n    throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n  };\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema) {\n  let dictionaries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Map();\n  const fields = decodeSchemaFields(_schema, dictionaries);\n  return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  if (batch.compression() !== null) {\n    throw new Error('Record batch compression not implemented');\n  }\n  return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch) {\n  let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MetadataVersion.V4;\n  return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n  return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n  return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n  const nodes = [];\n  for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n    if (f = batch.nodes(i)) {\n      nodes[++j] = FieldNode.decode(f);\n    }\n  }\n  return nodes;\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n  const bufferRegions = [];\n  for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n    if (b = batch.buffers(i)) {\n      // If this Arrow buffer was written before version 4,\n      // advance the buffer's bb_pos 8 bytes to skip past\n      // the now-removed page_id field\n      if (version < MetadataVersion.V4) {\n        b.bb_pos += 8 * (i + 1);\n      }\n      bufferRegions[++j] = BufferRegion.decode(b);\n    }\n  }\n  return bufferRegions;\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries) {\n  const fields = [];\n  for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n    if (f = schema.fields(i)) {\n      fields[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return fields;\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries) {\n  const children = [];\n  for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n    if (f = field.children(i)) {\n      children[++j] = Field.decode(f, dictionaries);\n    }\n  }\n  return children;\n}\n/** @ignore */\nfunction decodeField(f, dictionaries) {\n  let id;\n  let field;\n  let type;\n  let keys;\n  let dictType;\n  let dictMeta;\n  // If no dictionary encoding\n  if (!dictionaries || !(dictMeta = f.dictionary())) {\n    type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n    field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded and the first time we've seen this dictionary id, decode\n  // the data type and child fields, then wrap in a Dictionary type and insert the\n  // data type into the dictionary types map.\n  else if (!dictionaries.has(id = bigIntToNumber(dictMeta.id()))) {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n    dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n  // data type and wrap in a new Dictionary type and field.\n  else {\n    // a dictionary index defaults to signed 32 bit int if unspecified\n    keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n    dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n    field = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n  }\n  return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n  const data = new Map();\n  if (parent) {\n    for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n      if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n        data.set(key, entry.value());\n      }\n    }\n  }\n  return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n  return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n  const typeId = f.typeType();\n  switch (typeId) {\n    case Type['NONE']:\n      return new Null();\n    case Type['Null']:\n      return new Null();\n    case Type['Binary']:\n      return new Binary();\n    case Type['Utf8']:\n      return new Utf8();\n    case Type['Bool']:\n      return new Bool();\n    case Type['List']:\n      return new List((children || [])[0]);\n    case Type['Struct_']:\n      return new Struct(children || []);\n  }\n  switch (typeId) {\n    case Type['Int']:\n      {\n        const t = f.type(new _Int());\n        return new Int(t.isSigned(), t.bitWidth());\n      }\n    case Type['FloatingPoint']:\n      {\n        const t = f.type(new _FloatingPoint());\n        return new Float(t.precision());\n      }\n    case Type['Decimal']:\n      {\n        const t = f.type(new _Decimal());\n        return new Decimal(t.scale(), t.precision(), t.bitWidth());\n      }\n    case Type['Date']:\n      {\n        const t = f.type(new _Date());\n        return new Date_(t.unit());\n      }\n    case Type['Time']:\n      {\n        const t = f.type(new _Time());\n        return new Time(t.unit(), t.bitWidth());\n      }\n    case Type['Timestamp']:\n      {\n        const t = f.type(new _Timestamp());\n        return new Timestamp(t.unit(), t.timezone());\n      }\n    case Type['Interval']:\n      {\n        const t = f.type(new _Interval());\n        return new Interval(t.unit());\n      }\n    case Type['Union']:\n      {\n        const t = f.type(new _Union());\n        return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n      }\n    case Type['FixedSizeBinary']:\n      {\n        const t = f.type(new _FixedSizeBinary());\n        return new FixedSizeBinary(t.byteWidth());\n      }\n    case Type['FixedSizeList']:\n      {\n        const t = f.type(new _FixedSizeList());\n        return new FixedSizeList(t.listSize(), (children || [])[0]);\n      }\n    case Type['Map']:\n      {\n        const t = f.type(new _Map());\n        return new Map_((children || [])[0], t.keysSorted());\n      }\n  }\n  throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n  const fieldOffsets = schema.fields.map(f => Field.encode(b, f));\n  _Schema.startFieldsVector(b, fieldOffsets.length);\n  const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n  const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 : _Schema.createCustomMetadataVector(b, [...schema.metadata].map(_ref => {\n    let [k, v] = _ref;\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  _Schema.startSchema(b);\n  _Schema.addFields(b, fieldsVectorOffset);\n  _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n  if (metadataOffset !== -1) {\n    _Schema.addCustomMetadata(b, metadataOffset);\n  }\n  return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n  let nameOffset = -1;\n  let typeOffset = -1;\n  let dictionaryOffset = -1;\n  const type = field.type;\n  let typeId = field.typeId;\n  if (!DataType.isDictionary(type)) {\n    typeOffset = typeAssembler.visit(type, b);\n  } else {\n    typeId = type.dictionary.typeId;\n    dictionaryOffset = typeAssembler.visit(type, b);\n    typeOffset = typeAssembler.visit(type.dictionary, b);\n  }\n  const childOffsets = (type.children || []).map(f => Field.encode(b, f));\n  const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n  const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 : _Field.createCustomMetadataVector(b, [...field.metadata].map(_ref2 => {\n    let [k, v] = _ref2;\n    const key = b.createString(`${k}`);\n    const val = b.createString(`${v}`);\n    _KeyValue.startKeyValue(b);\n    _KeyValue.addKey(b, key);\n    _KeyValue.addValue(b, val);\n    return _KeyValue.endKeyValue(b);\n  }));\n  if (field.name) {\n    nameOffset = b.createString(field.name);\n  }\n  _Field.startField(b);\n  _Field.addType(b, typeOffset);\n  _Field.addTypeType(b, typeId);\n  _Field.addChildren(b, childrenVectorOffset);\n  _Field.addNullable(b, !!field.nullable);\n  if (nameOffset !== -1) {\n    _Field.addName(b, nameOffset);\n  }\n  if (dictionaryOffset !== -1) {\n    _Field.addDictionary(b, dictionaryOffset);\n  }\n  if (metadataOffset !== -1) {\n    _Field.addCustomMetadata(b, metadataOffset);\n  }\n  return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n  const nodes = recordBatch.nodes || [];\n  const buffers = recordBatch.buffers || [];\n  _RecordBatch.startNodesVector(b, nodes.length);\n  for (const n of nodes.slice().reverse()) FieldNode.encode(b, n);\n  const nodesVectorOffset = b.endVector();\n  _RecordBatch.startBuffersVector(b, buffers.length);\n  for (const b_ of buffers.slice().reverse()) BufferRegion.encode(b, b_);\n  const buffersVectorOffset = b.endVector();\n  _RecordBatch.startRecordBatch(b);\n  _RecordBatch.addLength(b, BigInt(recordBatch.length));\n  _RecordBatch.addNodes(b, nodesVectorOffset);\n  _RecordBatch.addBuffers(b, buffersVectorOffset);\n  return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n  const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n  _DictionaryBatch.startDictionaryBatch(b);\n  _DictionaryBatch.addId(b, BigInt(dictionaryBatch.id));\n  _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n  _DictionaryBatch.addData(b, dataOffset);\n  return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n  return _FieldNode.createFieldNode(b, BigInt(node.length), BigInt(node.nullCount));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n  return _Buffer.createBuffer(b, BigInt(node.offset), BigInt(node.length));\n}\n/** @ignore */\nconst platformIsLittleEndian = (() => {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n  // Int16Array uses the platform's endianness.\n  return new Int16Array(buffer)[0] === 256;\n})();","map":{"version":3,"names":["flatbuffers","Schema","_Schema","Int","_Int","RecordBatch","_RecordBatch","DictionaryBatch","_DictionaryBatch","Buffer","_Buffer","Field","_Field","FieldNode","_FieldNode","Type","KeyValue","_KeyValue","Endianness","_Endianness","FloatingPoint","_FloatingPoint","Decimal","_Decimal","Date","_Date","Time","_Time","Timestamp","_Timestamp","Interval","_Interval","Union","_Union","FixedSizeBinary","_FixedSizeBinary","FixedSizeList","_FixedSizeList","Map","_Map","Message","_Message","toUint8Array","bigIntToNumber","MessageHeader","MetadataVersion","instance","typeAssembler","fieldFromJSON","schemaFromJSON","recordBatchFromJSON","dictionaryBatchFromJSON","Builder","ByteBuffer","DataType","Dictionary","Utf8","Binary","List","Map_","Struct","Bool","Null","Float","Date_","Int32","fromJSON","msg","headerType","message","V4","_createHeader","messageHeaderFromJSON","decode","buf","_message","getRootAsMessage","bodyLength","version","decodeMessageHeader","encode","b","headerOffset","isSchema","header","isRecordBatch","isDictionaryBatch","startMessage","addVersion","addHeader","addHeaderType","addBodyLength","BigInt","finishMessageBuffer","endMessage","asUint8Array","from","arguments","length","undefined","Error","type","_version","_headerType","_bodyLength","constructor","body","Uint8Array","nodes","_nodes","_length","buffers","_buffers","id","_id","data","_data","isDelta","_isDelta","BufferRegion","offset","nullCount","encodeField","decodeField","encodeSchema","decodeSchema","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","_schema","dictionaries","fields","decodeSchemaFields","decodeCustomMetadata","batch","compression","decodeFieldNodes","decodeBuffers","f","i","j","n","nodesLength","bufferRegions","buffersLength","bb_pos","schema","fieldsLength","decodeFieldChildren","field","children","childrenLength","keys","dictType","dictMeta","dictionary","decodeFieldType","name","nullable","has","indexType","decodeIndexType","set","isOrdered","get","parent","entry","key","Math","trunc","customMetadataLength","customMetadata","value","_type","isSigned","bitWidth","typeId","typeType","t","precision","scale","unit","timezone","mode","typeIdsArray","byteWidth","listSize","keysSorted","fieldOffsets","map","startFieldsVector","fieldsVectorOffset","createFieldsVector","metadataOffset","metadata","size","createCustomMetadataVector","_ref","k","v","createString","val","startKeyValue","addKey","addValue","endKeyValue","startSchema","addFields","addEndianness","platformIsLittleEndian","Little","Big","addCustomMetadata","endSchema","nameOffset","typeOffset","dictionaryOffset","isDictionary","visit","childOffsets","childrenVectorOffset","createChildrenVector","_ref2","startField","addType","addTypeType","addChildren","addNullable","addName","addDictionary","endField","recordBatch","startNodesVector","slice","reverse","nodesVectorOffset","endVector","startBuffersVector","b_","buffersVectorOffset","startRecordBatch","addLength","addNodes","addBuffers","endRecordBatch","dictionaryBatch","dataOffset","startDictionaryBatch","addId","addIsDelta","addData","endDictionaryBatch","node","createFieldNode","createBuffer","buffer","ArrayBuffer","DataView","setInt16","Int16Array"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/node_modules/apache-arrow/src/ipc/metadata/message.ts"],"sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\n/* eslint-disable brace-style */\n\nimport * as flatbuffers from 'flatbuffers';\n\nimport { Schema as _Schema } from '../../fb/schema.js';\nimport { Int as _Int } from '../../fb/int.js';\nimport { RecordBatch as _RecordBatch } from '../../fb/record-batch.js';\nimport { DictionaryBatch as _DictionaryBatch } from '../../fb/dictionary-batch.js';\nimport { Buffer as _Buffer } from '../../fb/buffer.js';\nimport { Field as _Field } from '../../fb/field.js';\nimport { FieldNode as _FieldNode } from '../../fb/field-node.js';\nimport { DictionaryEncoding as _DictionaryEncoding } from '../../fb/dictionary-encoding.js';\nimport { Type } from '../../fb/type.js';\nimport { KeyValue as _KeyValue } from '../../fb/key-value.js';\nimport { Endianness as _Endianness } from '../../fb/endianness.js';\nimport { FloatingPoint as _FloatingPoint } from '../../fb/floating-point.js';\nimport { Decimal as _Decimal } from '../../fb/decimal.js';\nimport { Date as _Date } from '../../fb/date.js';\nimport { Time as _Time } from '../../fb/time.js';\nimport { Timestamp as _Timestamp } from '../../fb/timestamp.js';\nimport { Interval as _Interval } from '../../fb/interval.js';\nimport { Union as _Union } from '../../fb/union.js';\nimport { FixedSizeBinary as _FixedSizeBinary } from '../../fb/fixed-size-binary.js';\nimport { FixedSizeList as _FixedSizeList } from '../../fb/fixed-size-list.js';\nimport { Map as _Map } from '../../fb/map.js';\nimport { Message as _Message } from '../../fb/message.js';\n\nimport { Schema, Field } from '../../schema.js';\nimport { toUint8Array } from '../../util/buffer.js';\nimport { ArrayBufferViewInput } from '../../util/buffer.js';\nimport { bigIntToNumber } from '../../util/bigint.js';\nimport { MessageHeader, MetadataVersion } from '../../enum.js';\nimport { instance as typeAssembler } from '../../visitor/typeassembler.js';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json.js';\n\nimport Builder = flatbuffers.Builder;\nimport ByteBuffer = flatbuffers.ByteBuffer;\n\nimport {\n    DataType, Dictionary, TimeBitWidth,\n    Utf8, Binary, Decimal, FixedSizeBinary,\n    List, FixedSizeList, Map_, Struct, Union,\n    Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, IntBitWidth, Int32, TKeys,\n} from '../../type.js';\n\n/**\n * @ignore\n * @private\n **/\nexport class Message<T extends MessageHeader = any> {\n\n    /** @nocollapse */\n    public static fromJSON<T extends MessageHeader>(msg: any, headerType: T): Message<T> {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static decode(buf: ArrayBufferViewInput) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength: bigint = _message.bodyLength()!;\n        const version: MetadataVersion = _message.version();\n        const headerType: MessageHeader = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n\n    /** @nocollapse */\n    public static encode<T extends MessageHeader>(message: Message<T>) {\n        const b = new Builder();\n        let headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header() as Schema);\n        } else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header() as RecordBatch);\n        } else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header() as DictionaryBatch);\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, BigInt(message.bodyLength));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n\n    /** @nocollapse */\n    public static from(header: Schema | RecordBatch | DictionaryBatch, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n\n    public body: Uint8Array;\n    protected _headerType: T;\n    protected _bodyLength: number;\n    protected _version: MetadataVersion;\n    public get type() { return this.headerType; }\n    public get version() { return this._version; }\n    public get headerType() { return this._headerType; }\n    public get bodyLength() { return this._bodyLength; }\n    declare protected _createHeader: MessageHeaderDecoder;\n    public header() { return this._createHeader<T>(); }\n    public isSchema(): this is Message<MessageHeader.Schema> { return this.headerType === MessageHeader.Schema; }\n    public isRecordBatch(): this is Message<MessageHeader.RecordBatch> { return this.headerType === MessageHeader.RecordBatch; }\n    public isDictionaryBatch(): this is Message<MessageHeader.DictionaryBatch> { return this.headerType === MessageHeader.DictionaryBatch; }\n\n    constructor(bodyLength: bigint | number, version: MetadataVersion, headerType: T, header?: any) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = bigIntToNumber(bodyLength);\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class RecordBatch {\n    protected _length: number;\n    protected _nodes: FieldNode[];\n    protected _buffers: BufferRegion[];\n    public get nodes() { return this._nodes; }\n    public get length() { return this._length; }\n    public get buffers() { return this._buffers; }\n    constructor(length: bigint | number, nodes: FieldNode[], buffers: BufferRegion[]) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = bigIntToNumber(length);\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class DictionaryBatch {\n\n    protected _id: number;\n    protected _isDelta: boolean;\n    protected _data: RecordBatch;\n    public get id() { return this._id; }\n    public get data() { return this._data; }\n    public get isDelta() { return this._isDelta; }\n    public get length(): number { return this.data.length; }\n    public get nodes(): FieldNode[] { return this.data.nodes; }\n    public get buffers(): BufferRegion[] { return this.data.buffers; }\n\n    constructor(data: RecordBatch, id: bigint | number, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = bigIntToNumber(id);\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class BufferRegion {\n    public offset: number;\n    public length: number;\n    constructor(offset: bigint | number, length: bigint | number) {\n        this.offset = bigIntToNumber(offset);\n        this.length = bigIntToNumber(length);\n    }\n}\n\n/**\n * @ignore\n * @private\n **/\nexport class FieldNode {\n    public length: number;\n    public nullCount: number;\n    constructor(length: bigint | number, nullCount: bigint | number) {\n        this.length = bigIntToNumber(length);\n        this.nullCount = bigIntToNumber(nullCount);\n    }\n}\n\n/** @ignore */\nfunction messageHeaderFromJSON(message: any, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\n/** @ignore */\nfunction decodeMessageHeader(message: _Message, type: MessageHeader) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema())!);\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch())!, message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch())!, message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    }) as MessageHeaderDecoder;\n}\n\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\n\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\n\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\n\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\n\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\n\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n\ndeclare module '../../schema' {\n    namespace Field {\n        export { encodeField as encode };\n        export { decodeField as decode };\n        export { fieldFromJSON as fromJSON };\n    }\n    namespace Schema {\n        export { encodeSchema as encode };\n        export { decodeSchema as decode };\n        export { schemaFromJSON as fromJSON };\n    }\n}\n\ndeclare module './message' {\n    namespace RecordBatch {\n        export { encodeRecordBatch as encode };\n        export { decodeRecordBatch as decode };\n        export { recordBatchFromJSON as fromJSON };\n    }\n    namespace DictionaryBatch {\n        export { encodeDictionaryBatch as encode };\n        export { decodeDictionaryBatch as decode };\n        export { dictionaryBatchFromJSON as fromJSON };\n    }\n    namespace FieldNode {\n        export { encodeFieldNode as encode };\n        export { decodeFieldNode as decode };\n    }\n    namespace BufferRegion {\n        export { encodeBufferRegion as encode };\n        export { decodeBufferRegion as decode };\n    }\n}\n\n/** @ignore */\nfunction decodeSchema(_schema: _Schema, dictionaries: Map<number, DataType> = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries);\n}\n\n/** @ignore */\nfunction decodeRecordBatch(batch: _RecordBatch, version = MetadataVersion.V4) {\n    if (batch.compression() !== null) {\n        throw new Error('Record batch compression not implemented');\n    }\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n\n/** @ignore */\nfunction decodeDictionaryBatch(batch: _DictionaryBatch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data()!, version), batch.id(), batch.isDelta());\n}\n\n/** @ignore */\nfunction decodeBufferRegion(b: _Buffer) {\n    return new BufferRegion(b.offset(), b.length());\n}\n\n/** @ignore */\nfunction decodeFieldNode(f: _FieldNode) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n\n/** @ignore */\nfunction decodeFieldNodes(batch: _RecordBatch) {\n    const nodes = [] as FieldNode[];\n    for (let f, i = -1, j = -1, n = batch.nodesLength(); ++i < n;) {\n        if (f = batch.nodes(i)) {\n            nodes[++j] = FieldNode.decode(f);\n        }\n    }\n    return nodes;\n}\n\n/** @ignore */\nfunction decodeBuffers(batch: _RecordBatch, version: MetadataVersion) {\n    const bufferRegions = [] as BufferRegion[];\n    for (let b, i = -1, j = -1, n = batch.buffersLength(); ++i < n;) {\n        if (b = batch.buffers(i)) {\n            // If this Arrow buffer was written before version 4,\n            // advance the buffer's bb_pos 8 bytes to skip past\n            // the now-removed page_id field\n            if (version < MetadataVersion.V4) {\n                b.bb_pos += (8 * (i + 1));\n            }\n            bufferRegions[++j] = BufferRegion.decode(b);\n        }\n    }\n    return bufferRegions;\n}\n\n/** @ignore */\nfunction decodeSchemaFields(schema: _Schema, dictionaries?: Map<number, DataType>) {\n    const fields = [] as Field[];\n    for (let f, i = -1, j = -1, n = schema.fieldsLength(); ++i < n;) {\n        if (f = schema.fields(i)) {\n            fields[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return fields;\n}\n\n/** @ignore */\nfunction decodeFieldChildren(field: _Field, dictionaries?: Map<number, DataType>): Field[] {\n    const children = [] as Field[];\n    for (let f, i = -1, j = -1, n = field.childrenLength(); ++i < n;) {\n        if (f = field.children(i)) {\n            children[++j] = Field.decode(f, dictionaries);\n        }\n    }\n    return children;\n}\n\n/** @ignore */\nfunction decodeField(f: _Field, dictionaries?: Map<number, DataType>) {\n\n    let id: number;\n    let field: Field | void;\n    let type: DataType<any>;\n    let keys: _Int | TKeys | null;\n    let dictType: Dictionary;\n    let dictMeta: _DictionaryEncoding | null;\n\n    // If no dictionary encoding\n    if (!dictionaries || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries));\n        field = new Field(f.name()!, type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = bigIntToNumber(dictMeta.id()))) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f, dictionaries)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) as TKeys : new Int32();\n        dictType = new Dictionary(dictionaries.get(id)!, keys, id, dictMeta.isOrdered());\n        field = new Field(f.name()!, dictType, f.nullable(), decodeCustomMetadata(f));\n    }\n    return field || null;\n}\n\n/** @ignore */\nfunction decodeCustomMetadata(parent?: _Schema | _Field | null) {\n    const data = new Map<string, string>();\n    if (parent) {\n        for (let entry, key, i = -1, n = Math.trunc(parent.customMetadataLength()); ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value()!);\n            }\n        }\n    }\n    return data;\n}\n\n/** @ignore */\nfunction decodeIndexType(_type: _Int) {\n    return new Int(_type.isSigned(), _type.bitWidth() as IntBitWidth);\n}\n\n/** @ignore */\nfunction decodeFieldType(f: _Field, children?: Field[]): DataType<any> {\n\n    const typeId = f.typeType();\n\n    switch (typeId) {\n        case Type['NONE']: return new Null();\n        case Type['Null']: return new Null();\n        case Type['Binary']: return new Binary();\n        case Type['Utf8']: return new Utf8();\n        case Type['Bool']: return new Bool();\n        case Type['List']: return new List((children || [])[0]);\n        case Type['Struct_']: return new Struct(children || []);\n    }\n\n    switch (typeId) {\n        case Type['Int']: {\n            const t = f.type(new _Int())!;\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type['FloatingPoint']: {\n            const t = f.type(new _FloatingPoint())!;\n            return new Float(t.precision());\n        }\n        case Type['Decimal']: {\n            const t = f.type(new _Decimal())!;\n            return new Decimal(t.scale(), t.precision(), t.bitWidth());\n        }\n        case Type['Date']: {\n            const t = f.type(new _Date())!;\n            return new Date_(t.unit());\n        }\n        case Type['Time']: {\n            const t = f.type(new _Time())!;\n            return new Time(t.unit(), t.bitWidth() as TimeBitWidth);\n        }\n        case Type['Timestamp']: {\n            const t = f.type(new _Timestamp())!;\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type['Interval']: {\n            const t = f.type(new _Interval())!;\n            return new Interval(t.unit());\n        }\n        case Type['Union']: {\n            const t = f.type(new _Union())!;\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type['FixedSizeBinary']: {\n            const t = f.type(new _FixedSizeBinary())!;\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type['FixedSizeList']: {\n            const t = f.type(new _FixedSizeList())!;\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type['Map']: {\n            const t = f.type(new _Map())!;\n            return new Map_((children || [])[0], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n\n/** @ignore */\nfunction encodeSchema(b: Builder, schema: Schema) {\n\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n\n    if (metadataOffset !== -1) { _Schema.addCustomMetadata(b, metadataOffset); }\n\n    return _Schema.endSchema(b);\n}\n\n/** @ignore */\nfunction encodeField(b: Builder, field: Field) {\n\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n\n    const type = field.type;\n    let typeId: Type = <any>field.typeId;\n\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b)!;\n    } else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b)!;\n        typeOffset = typeAssembler.visit(type.dictionary, b)!;\n    }\n\n    const childOffsets = (type.children || []).map((f: Field) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n\n    if (nameOffset !== -1) { _Field.addName(b, nameOffset); }\n    if (dictionaryOffset !== -1) { _Field.addDictionary(b, dictionaryOffset); }\n    if (metadataOffset !== -1) { _Field.addCustomMetadata(b, metadataOffset); }\n\n    return _Field.endField(b);\n}\n\n/** @ignore */\nfunction encodeRecordBatch(b: Builder, recordBatch: RecordBatch) {\n\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n\n    _RecordBatch.startNodesVector(b, nodes.length);\n    for (const n of nodes.slice().reverse()) FieldNode.encode(b, n);\n\n    const nodesVectorOffset = b.endVector();\n\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    for (const b_ of buffers.slice().reverse()) BufferRegion.encode(b, b_);\n\n    const buffersVectorOffset = b.endVector();\n\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, BigInt(recordBatch.length));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n\n/** @ignore */\nfunction encodeDictionaryBatch(b: Builder, dictionaryBatch: DictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, BigInt(dictionaryBatch.id));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n\n/** @ignore */\nfunction encodeFieldNode(b: Builder, node: FieldNode) {\n    return _FieldNode.createFieldNode(b, BigInt(node.length), BigInt(node.nullCount));\n}\n\n/** @ignore */\nfunction encodeBufferRegion(b: Builder, node: BufferRegion) {\n    return _Buffer.createBuffer(b, BigInt(node.offset), BigInt(node.length));\n}\n\n/** @ignore */\nconst platformIsLittleEndian = (() => {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n/** @ignore */\ntype MessageHeaderDecoder = <T extends MessageHeader>() => T extends MessageHeader.Schema ? Schema\n    : T extends MessageHeader.RecordBatch ? RecordBatch\n    : T extends MessageHeader.DictionaryBatch ? DictionaryBatch : never;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}