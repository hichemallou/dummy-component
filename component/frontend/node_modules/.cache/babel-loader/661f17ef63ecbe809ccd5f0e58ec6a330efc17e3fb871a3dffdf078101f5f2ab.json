{"ast":null,"code":"var _jsxFileName = \"/home/helektrika/Documents/dummy-component/component/frontend/src/MyComponent.tsx\",\n  _s = $RefreshSig$();\nimport { Streamlit } from \"streamlit-component-lib\";\nimport { useRenderData } from \"./hook\";\nimport React, { useState, useCallback } from \"react\";\n\n/**\n * This is a React-based component template with functional component and hooks.\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyComponent = () => {\n  _s();\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData();\n  const [numClicks, setNumClicks] = useState(0);\n  const [isFocused, setIsFocused] = useState(false);\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback(() => {\n    // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const newValue = numClicks + 1;\n    setNumClicks(newValue);\n    Streamlit.setComponentValue(newValue);\n  }, [numClicks]);\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false);\n  }, []);\n\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n  const name = renderData.args[\"name\"];\n\n  // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const theme = renderData.theme;\n  const style = {};\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`;\n    style.border = borderStyling;\n    style.outline = borderStyling;\n  }\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Hello, \", name, \"! \\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n      style: style,\n      onClick: onClicked,\n      disabled: renderData.disabled,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      children: \"Click Me! 2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(MyComponent, \"Rduzq1O016YuPx6LrGd9VdudJa0=\", false, function () {\n  return [useRenderData];\n});\n_c = MyComponent;\nexport default MyComponent;\nvar _c;\n$RefreshReg$(_c, \"MyComponent\");","map":{"version":3,"names":["Streamlit","useRenderData","React","useState","useCallback","jsxDEV","_jsxDEV","MyComponent","_s","renderData","numClicks","setNumClicks","isFocused","setIsFocused","onClicked","newValue","setComponentValue","onFocus","onBlur","name","args","theme","style","borderStyling","primaryColor","border","outline","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/src/MyComponent.tsx"],"sourcesContent":["import { Streamlit } from \"streamlit-component-lib\"\nimport { useRenderData } from \"./hook\"\nimport React, { useState, useCallback } from \"react\"\n\n/**\n * This is a React-based component template with functional component and hooks.\n */\nconst MyComponent: React.VFC = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData()\n\n  const [numClicks, setNumClicks] = useState(0)\n  const [isFocused, setIsFocused] = useState(false)\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback(() => {\n    // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const newValue = numClicks + 1\n    setNumClicks(newValue)\n    Streamlit.setComponentValue(newValue)\n  }, [numClicks])\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false)\n  }, [])\n\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n  const name = renderData.args[\"name\"]\n\n  // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const theme = renderData.theme\n  const style: React.CSSProperties = {}\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <span>\n      Hello, {name}! &nbsp;\n      <button\n        style={style}\n        onClick={onClicked}\n        disabled={renderData.disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      >\n        Click Me! 2\n      </button>\n    </span>\n  )\n}\n\nexport default MyComponent\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,yBAAyB;AACnD,SAASC,aAAa,QAAQ,QAAQ;AACtC,OAAOC,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAEpD;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,WAAsB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC;EACA,MAAMC,UAAU,GAAGR,aAAa,CAAC,CAAC;EAElC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAEjD;EACA,MAAMW,SAAS,GAAGV,WAAW,CAAC,MAAM;IAClC;IACA;IACA,MAAMW,QAAQ,GAAGL,SAAS,GAAG,CAAC;IAC9BC,YAAY,CAACI,QAAQ,CAAC;IACtBf,SAAS,CAACgB,iBAAiB,CAACD,QAAQ,CAAC;EACvC,CAAC,EAAE,CAACL,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMO,OAAO,GAAGb,WAAW,CAAC,MAAM;IAChCS,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMK,MAAM,GAAGd,WAAW,CAAC,MAAM;IAC/BS,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAMM,IAAI,GAAGV,UAAU,CAACW,IAAI,CAAC,MAAM,CAAC;;EAEpC;EACA;EACA;EACA,MAAMC,KAAK,GAAGZ,UAAU,CAACY,KAAK;EAC9B,MAAMC,KAA0B,GAAG,CAAC,CAAC;;EAErC;EACA;EACA,IAAID,KAAK,EAAE;IACT;IACA;IACA,MAAME,aAAa,GAAI,aAAYX,SAAS,GAAGS,KAAK,CAACG,YAAY,GAAG,MAAO,EAAC;IAC5EF,KAAK,CAACG,MAAM,GAAGF,aAAa;IAC5BD,KAAK,CAACI,OAAO,GAAGH,aAAa;EAC/B;;EAEA;EACA;EACA;EACA;EACA,oBACEjB,OAAA;IAAAqB,QAAA,GAAM,SACG,EAACR,IAAI,EAAC,QACb,eAAAb,OAAA;MACEgB,KAAK,EAAEA,KAAM;MACbM,OAAO,EAAEd,SAAU;MACnBe,QAAQ,EAAEpB,UAAU,CAACoB,QAAS;MAC9BZ,OAAO,EAAEA,OAAQ;MACjBC,MAAM,EAAEA,MAAO;MAAAS,QAAA,EAChB;IAED;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEX,CAAC;AAAAzB,EAAA,CAhEKD,WAAsB;EAAA,QAEPN,aAAa;AAAA;AAAAiC,EAAA,GAF5B3B,WAAsB;AAkE5B,eAAeA,WAAW;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}