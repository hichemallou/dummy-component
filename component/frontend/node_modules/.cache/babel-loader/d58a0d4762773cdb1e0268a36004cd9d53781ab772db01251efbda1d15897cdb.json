{"ast":null,"code":"import _classCallCheck from \"/home/helektrika/Documents/dummy-component/component/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/helektrika/Documents/dummy-component/component/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// automatically generated by the FlatBuffers compiler, do not modify\nimport * as flatbuffers from 'flatbuffers';\n/**\n * Contains two child arrays, run_ends and values.\n * The run_ends child array must be a 16/32/64-bit integer array\n * which encodes the indices at which the run with the value in\n * each corresponding index in the values child array ends.\n * Like list/struct types, the value array can be of any type.\n */\nexport var RunEndEncoded = /*#__PURE__*/function () {\n  function RunEndEncoded() {\n    _classCallCheck(this, RunEndEncoded);\n    this.bb = null;\n    this.bb_pos = 0;\n  }\n  _createClass(RunEndEncoded, [{\n    key: \"__init\",\n    value: function __init(i, bb) {\n      this.bb_pos = i;\n      this.bb = bb;\n      return this;\n    }\n  }], [{\n    key: \"getRootAsRunEndEncoded\",\n    value: function getRootAsRunEndEncoded(bb, obj) {\n      return (obj || new RunEndEncoded()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"getSizePrefixedRootAsRunEndEncoded\",\n    value: function getSizePrefixedRootAsRunEndEncoded(bb, obj) {\n      bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n      return (obj || new RunEndEncoded()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n    }\n  }, {\n    key: \"startRunEndEncoded\",\n    value: function startRunEndEncoded(builder) {\n      builder.startObject(0);\n    }\n  }, {\n    key: \"endRunEndEncoded\",\n    value: function endRunEndEncoded(builder) {\n      var offset = builder.endObject();\n      return offset;\n    }\n  }, {\n    key: \"createRunEndEncoded\",\n    value: function createRunEndEncoded(builder) {\n      RunEndEncoded.startRunEndEncoded(builder);\n      return RunEndEncoded.endRunEndEncoded(builder);\n    }\n  }]);\n  return RunEndEncoded;\n}();","map":{"version":3,"names":["flatbuffers","RunEndEncoded","_classCallCheck","bb","bb_pos","_createClass","key","value","__init","i","getRootAsRunEndEncoded","obj","readInt32","position","getSizePrefixedRootAsRunEndEncoded","setPosition","SIZE_PREFIX_LENGTH","startRunEndEncoded","builder","startObject","endRunEndEncoded","offset","endObject","createRunEndEncoded"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/node_modules/apache-arrow/src/fb/run-end-encoded.ts"],"sourcesContent":["// automatically generated by the FlatBuffers compiler, do not modify\n\nimport * as flatbuffers from 'flatbuffers';\n\n/**\n * Contains two child arrays, run_ends and values.\n * The run_ends child array must be a 16/32/64-bit integer array\n * which encodes the indices at which the run with the value in\n * each corresponding index in the values child array ends.\n * Like list/struct types, the value array can be of any type.\n */\nexport class RunEndEncoded {\n  bb: flatbuffers.ByteBuffer|null = null;\n  bb_pos = 0;\n  __init(i:number, bb:flatbuffers.ByteBuffer):RunEndEncoded {\n  this.bb_pos = i;\n  this.bb = bb;\n  return this;\n}\n\nstatic getRootAsRunEndEncoded(bb:flatbuffers.ByteBuffer, obj?:RunEndEncoded):RunEndEncoded {\n  return (obj || new RunEndEncoded()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic getSizePrefixedRootAsRunEndEncoded(bb:flatbuffers.ByteBuffer, obj?:RunEndEncoded):RunEndEncoded {\n  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);\n  return (obj || new RunEndEncoded()).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n}\n\nstatic startRunEndEncoded(builder:flatbuffers.Builder) {\n  builder.startObject(0);\n}\n\nstatic endRunEndEncoded(builder:flatbuffers.Builder):flatbuffers.Offset {\n  const offset = builder.endObject();\n  return offset;\n}\n\nstatic createRunEndEncoded(builder:flatbuffers.Builder):flatbuffers.Offset {\n  RunEndEncoded.startRunEndEncoded(builder);\n  return RunEndEncoded.endRunEndEncoded(builder);\n}\n}\n"],"mappings":";;AAAA;AAEA,OAAO,KAAKA,WAAW,MAAM,aAAa;AAE1C;;;;;;;AAOA,WAAaC,aAAa;EAA1B,SAAAA,cAAA;IAAAC,eAAA,OAAAD,aAAA;IACE,KAAAE,EAAE,GAAgC,IAAI;IACtC,KAAAC,MAAM,GAAG,CAAC;EA6BZ;EAACC,YAAA,CAAAJ,aAAA;IAAAK,GAAA;IAAAC,KAAA,EA5BC,SAAAC,OAAOC,CAAQ,EAAEN,EAAyB;MAC1C,IAAI,CAACC,MAAM,GAAGK,CAAC;MACf,IAAI,CAACN,EAAE,GAAGA,EAAE;MACZ,OAAO,IAAI;IACb;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAG,uBAA8BP,EAAyB,EAAEQ,GAAkB;MACzE,OAAO,CAACA,GAAG,IAAI,IAAIV,aAAa,EAAE,EAAEO,MAAM,CAACL,EAAE,CAACS,SAAS,CAACT,EAAE,CAACU,QAAQ,EAAE,CAAC,GAAGV,EAAE,CAACU,QAAQ,EAAE,EAAEV,EAAE,CAAC;IAC7F;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAO,mCAA0CX,EAAyB,EAAEQ,GAAkB;MACrFR,EAAE,CAACY,WAAW,CAACZ,EAAE,CAACU,QAAQ,EAAE,GAAGb,WAAW,CAACgB,kBAAkB,CAAC;MAC9D,OAAO,CAACL,GAAG,IAAI,IAAIV,aAAa,EAAE,EAAEO,MAAM,CAACL,EAAE,CAACS,SAAS,CAACT,EAAE,CAACU,QAAQ,EAAE,CAAC,GAAGV,EAAE,CAACU,QAAQ,EAAE,EAAEV,EAAE,CAAC;IAC7F;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAU,mBAA0BC,OAA2B;MACnDA,OAAO,CAACC,WAAW,CAAC,CAAC,CAAC;IACxB;EAAC;IAAAb,GAAA;IAAAC,KAAA,EAED,SAAAa,iBAAwBF,OAA2B;MACjD,IAAMG,MAAM,GAAGH,OAAO,CAACI,SAAS,EAAE;MAClC,OAAOD,MAAM;IACf;EAAC;IAAAf,GAAA;IAAAC,KAAA,EAED,SAAAgB,oBAA2BL,OAA2B;MACpDjB,aAAa,CAACgB,kBAAkB,CAACC,OAAO,CAAC;MACzC,OAAOjB,aAAa,CAACmB,gBAAgB,CAACF,OAAO,CAAC;IAChD;EAAC;EAAA,OAAAjB,aAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}