{"ast":null,"code":"import React,{useEffect,useContext}from\"react\";import{Streamlit}from\"streamlit-component-lib\";import{useNullableRenderData}from\"./useNullableRenderData\";import ErrorBoundary from\"./ErrorBoundary\";import{jsx as _jsx}from\"react/jsx-runtime\";var renderDataContext=/*#__PURE__*/React.createContext(undefined);/**\n * Returns `RenderData` received from Streamlit.\n */export var useRenderData=function useRenderData(){var contextValue=useContext(renderDataContext);if(contextValue==null){throw new Error(\"useRenderData() must be used inside <StreamlitProvider />\");}return contextValue;};/**\n * Wrapper for React-hooks-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */var StreamlitProvider=function StreamlitProvider(props){var renderData=useNullableRenderData();useEffect(function(){Streamlit.setFrameHeight();});// Don't render until we've gotten our first data from Streamlit.\nif(renderData==null){return null;}return/*#__PURE__*/_jsx(ErrorBoundary,{children:/*#__PURE__*/_jsx(renderDataContext.Provider,{value:renderData,children:props.children})});};export default StreamlitProvider;","map":{"version":3,"names":["React","useEffect","useContext","Streamlit","useNullableRenderData","ErrorBoundary","jsx","_jsx","renderDataContext","createContext","undefined","useRenderData","contextValue","Error","StreamlitProvider","props","renderData","setFrameHeight","children","Provider","value"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/src/hook/StreamlitProvider.tsx"],"sourcesContent":["import React, { useEffect, useContext } from \"react\";\nimport { Streamlit, RenderData } from \"streamlit-component-lib\";\nimport { useNullableRenderData } from \"./useNullableRenderData\";\nimport ErrorBoundary from \"./ErrorBoundary\";\n\nconst renderDataContext = React.createContext<RenderData | undefined>(\n  undefined\n);\n\n/**\n * Returns `RenderData` received from Streamlit.\n */\nexport const useRenderData = (): RenderData => {\n  const contextValue = useContext(renderDataContext);\n  if (contextValue == null) {\n    throw new Error(\n      \"useRenderData() must be used inside <StreamlitProvider />\"\n    );\n  }\n\n  return contextValue;\n};\n\n/**\n * Wrapper for React-hooks-based Streamlit components.\n *\n * Bootstraps the communication interface between Streamlit and the component.\n */\ninterface StreamlitProviderProps {\n  children: React.ReactNode;\n}\nconst StreamlitProvider: React.VFC<StreamlitProviderProps> = (props) => {\n  const renderData = useNullableRenderData();\n\n  useEffect(() => {\n    Streamlit.setFrameHeight();\n  });\n\n  // Don't render until we've gotten our first data from Streamlit.\n  if (renderData == null) {\n    return null;\n  }\n\n  return (\n    <ErrorBoundary>\n      <renderDataContext.Provider value={renderData}>\n        {props.children}\n      </renderDataContext.Provider>\n    </ErrorBoundary>\n  );\n};\n\nexport default StreamlitProvider;"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,UAAU,KAAQ,OAAO,CACpD,OAASC,SAAS,KAAoB,yBAAyB,CAC/D,OAASC,qBAAqB,KAAQ,yBAAyB,CAC/D,MAAO,CAAAC,aAAa,KAAM,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,GAAM,CAAAC,iBAAiB,cAAGR,KAAK,CAACS,aAAa,CAC3CC,SACF,CAAC,CAED;AACA;AACA,GACA,MAAO,IAAM,CAAAC,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAA,CAAqB,CAC7C,GAAM,CAAAC,YAAY,CAAGV,UAAU,CAACM,iBAAiB,CAAC,CAClD,GAAII,YAAY,EAAI,IAAI,CAAE,CACxB,KAAM,IAAI,CAAAC,KAAK,CACb,2DACF,CAAC,CACH,CAEA,MAAO,CAAAD,YAAY,CACrB,CAAC,CAED;AACA;AACA;AACA;AACA,GAIA,GAAM,CAAAE,iBAAoD,CAAG,QAAvD,CAAAA,iBAAoDA,CAAIC,KAAK,CAAK,CACtE,GAAM,CAAAC,UAAU,CAAGZ,qBAAqB,CAAC,CAAC,CAE1CH,SAAS,CAAC,UAAM,CACdE,SAAS,CAACc,cAAc,CAAC,CAAC,CAC5B,CAAC,CAAC,CAEF;AACA,GAAID,UAAU,EAAI,IAAI,CAAE,CACtB,MAAO,KAAI,CACb,CAEA,mBACET,IAAA,CAACF,aAAa,EAAAa,QAAA,cACZX,IAAA,CAACC,iBAAiB,CAACW,QAAQ,EAACC,KAAK,CAAEJ,UAAW,CAAAE,QAAA,CAC3CH,KAAK,CAACG,QAAQ,CACW,CAAC,CAChB,CAAC,CAEpB,CAAC,CAED,cAAe,CAAAJ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}