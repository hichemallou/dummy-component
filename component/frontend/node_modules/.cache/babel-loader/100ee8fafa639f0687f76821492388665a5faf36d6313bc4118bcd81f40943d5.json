{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { Streamlit } from \"streamlit-component-lib\";\n\n/**\n * Returns `RenderData` received from Streamlit after the first render event received.\n */\nexport const useNullableRenderData = () => {\n  _s();\n  const [renderData, setRenderData] = useState();\n  useEffect(() => {\n    const onRenderEvent = event => {\n      const renderEvent = event;\n      setRenderData(renderEvent.detail);\n    };\n\n    // Set up event listeners, and signal to Streamlit that we're ready.\n    // We won't render the component until we receive the first RENDER_EVENT.\n    Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    Streamlit.setComponentReady();\n    const cleanup = () => {\n      Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    };\n    return cleanup;\n  }, []);\n  return renderData;\n};\n_s(useNullableRenderData, \"qgoNYGgneUA6kcncNAd81dVLD6Q=\");","map":{"version":3,"names":["useState","useEffect","Streamlit","useNullableRenderData","_s","renderData","setRenderData","onRenderEvent","event","renderEvent","detail","events","addEventListener","RENDER_EVENT","setComponentReady","cleanup","removeEventListener"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/src/hook/useNullableRenderData.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Streamlit, RenderData } from \"streamlit-component-lib\";\n\n/**\n * Returns `RenderData` received from Streamlit after the first render event received.\n */\nexport const useNullableRenderData = (): RenderData | undefined => {\n  const [renderData, setRenderData] = useState<RenderData>();\n\n  useEffect(() => {\n    const onRenderEvent = (event: Event): void => {\n      const renderEvent = event as CustomEvent<RenderData>;\n      setRenderData(renderEvent.detail);\n    };\n\n    // Set up event listeners, and signal to Streamlit that we're ready.\n    // We won't render the component until we receive the first RENDER_EVENT.\n    Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    Streamlit.setComponentReady();\n\n    const cleanup = () => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        onRenderEvent\n      );\n    };\n    return cleanup;\n  }, []);\n\n  return renderData;\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,SAAS,QAAoB,yBAAyB;;AAE/D;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAA8B;EAAAC,EAAA;EACjE,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAa,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd,MAAMM,aAAa,GAAIC,KAAY,IAAW;MAC5C,MAAMC,WAAW,GAAGD,KAAgC;MACpDF,aAAa,CAACG,WAAW,CAACC,MAAM,CAAC;IACnC,CAAC;;IAED;IACA;IACAR,SAAS,CAACS,MAAM,CAACC,gBAAgB,CAACV,SAAS,CAACW,YAAY,EAAEN,aAAa,CAAC;IACxEL,SAAS,CAACY,iBAAiB,CAAC,CAAC;IAE7B,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpBb,SAAS,CAACS,MAAM,CAACK,mBAAmB,CAClCd,SAAS,CAACW,YAAY,EACtBN,aACF,CAAC;IACH,CAAC;IACD,OAAOQ,OAAO;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOV,UAAU;AACnB,CAAC;AAACD,EAAA,CAxBWD,qBAAqB"},"metadata":{},"sourceType":"module","externalDependencies":[]}