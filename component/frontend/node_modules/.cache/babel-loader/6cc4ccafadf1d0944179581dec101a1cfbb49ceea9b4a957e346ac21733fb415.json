{"ast":null,"code":"import _slicedToArray from\"/home/helektrika/Documents/dummy-component/component/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from\"react\";import{Streamlit}from\"streamlit-component-lib\";/**\n * Returns `RenderData` received from Streamlit after the first render event received.\n */export var useNullableRenderData=function useNullableRenderData(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),renderData=_useState2[0],setRenderData=_useState2[1];useEffect(function(){var onRenderEvent=function onRenderEvent(event){var renderEvent=event;setRenderData(renderEvent.detail);};// Set up event listeners, and signal to Streamlit that we're ready.\n// We won't render the component until we receive the first RENDER_EVENT.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT,onRenderEvent);Streamlit.setComponentReady();var cleanup=function cleanup(){Streamlit.events.removeEventListener(Streamlit.RENDER_EVENT,onRenderEvent);};return cleanup;},[]);return renderData;};","map":{"version":3,"names":["useState","useEffect","Streamlit","useNullableRenderData","_useState","_useState2","_slicedToArray","renderData","setRenderData","onRenderEvent","event","renderEvent","detail","events","addEventListener","RENDER_EVENT","setComponentReady","cleanup","removeEventListener"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/src/hook/useNullableRenderData.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Streamlit, RenderData } from \"streamlit-component-lib\";\n\n/**\n * Returns `RenderData` received from Streamlit after the first render event received.\n */\nexport const useNullableRenderData = (): RenderData | undefined => {\n  const [renderData, setRenderData] = useState<RenderData>();\n\n  useEffect(() => {\n    const onRenderEvent = (event: Event): void => {\n      const renderEvent = event as CustomEvent<RenderData>;\n      setRenderData(renderEvent.detail);\n    };\n\n    // Set up event listeners, and signal to Streamlit that we're ready.\n    // We won't render the component until we receive the first RENDER_EVENT.\n    Streamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRenderEvent);\n    Streamlit.setComponentReady();\n\n    const cleanup = () => {\n      Streamlit.events.removeEventListener(\n        Streamlit.RENDER_EVENT,\n        onRenderEvent\n      );\n    };\n    return cleanup;\n  }, []);\n\n  return renderData;\n};"],"mappings":"mJAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,SAAS,KAAoB,yBAAyB,CAE/D;AACA;AACA,GACA,MAAO,IAAM,CAAAC,qBAAqB,CAAG,QAAxB,CAAAA,qBAAqBA,CAAA,CAAiC,CACjE,IAAAC,SAAA,CAAoCJ,QAAQ,CAAa,CAAC,CAAAK,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAnDG,UAAU,CAAAF,UAAA,IAAEG,aAAa,CAAAH,UAAA,IAEhCJ,SAAS,CAAC,UAAM,CACd,GAAM,CAAAQ,aAAa,CAAG,QAAhB,CAAAA,aAAaA,CAAIC,KAAY,CAAW,CAC5C,GAAM,CAAAC,WAAW,CAAGD,KAAgC,CACpDF,aAAa,CAACG,WAAW,CAACC,MAAM,CAAC,CACnC,CAAC,CAED;AACA;AACAV,SAAS,CAACW,MAAM,CAACC,gBAAgB,CAACZ,SAAS,CAACa,YAAY,CAAEN,aAAa,CAAC,CACxEP,SAAS,CAACc,iBAAiB,CAAC,CAAC,CAE7B,GAAM,CAAAC,OAAO,CAAG,QAAV,CAAAA,OAAOA,CAAA,CAAS,CACpBf,SAAS,CAACW,MAAM,CAACK,mBAAmB,CAClChB,SAAS,CAACa,YAAY,CACtBN,aACF,CAAC,CACH,CAAC,CACD,MAAO,CAAAQ,OAAO,CAChB,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAAV,UAAU,CACnB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}