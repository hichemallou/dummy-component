{"ast":null,"code":"import _slicedToArray from\"/home/helektrika/Documents/dummy-component/component/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{Streamlit}from\"streamlit-component-lib\";import{useRenderData}from\"./hook\";import React,{useState,useCallback}from\"react\";/**\n * This is a React-based component template with functional component and hooks.\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MyComponent=function MyComponent(){// \"useRenderData\" returns the renderData passed from Python.\nvar renderData=useRenderData();var _useState=useState(0),_useState2=_slicedToArray(_useState,2),numClicks=_useState2[0],setNumClicks=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isFocused=_useState4[0],setIsFocused=_useState4[1];/** Click handler for our \"Click Me!\" button. */var onClicked=useCallback(function(){// Increment `numClicks` state, and pass the new value back to\n// Streamlit via `Streamlit.setComponentValue`.\nvar newValue=numClicks+1;setNumClicks(newValue);Streamlit.setComponentValue(newValue);},[numClicks]);/** Focus handler for our \"Click Me!\" button. */var onFocus=useCallback(function(){setIsFocused(true);},[]);/** Blur handler for our \"Click Me!\" button. */var onBlur=useCallback(function(){setIsFocused(false);},[]);// Arguments that are passed to the plugin in Python are accessible\n// via `renderData.args`. Here, we access the \"name\" arg.\nvar name=renderData.args[\"name\"];// Streamlit sends us a theme object via renderData that we can use to ensure\n// that our component has visuals that match the active theme in a\n// streamlit app.\nvar theme=renderData.theme;var style={};// Maintain compatibility with older versions of Streamlit that don't send\n// a theme object.\nif(theme){// Use the theme object to style our button border. Alternatively, the\n// theme style is defined in CSS vars.\nvar borderStyling=\"1px solid \".concat(isFocused?theme.primaryColor:\"gray\");style.border=borderStyling;style.outline=borderStyling;}// Show a button and some text.\n// When the button is clicked, we'll increment our \"numClicks\" state\n// variable, and send its new value back to Streamlit, where it'll\n// be available to the Python program.\nreturn/*#__PURE__*/_jsxs(\"span\",{children:[\"Hello, \",name,\"! \\xA0\",/*#__PURE__*/_jsx(\"button\",{style:style,onClick:onClicked,disabled:renderData.disabled,onFocus:onFocus,onBlur:onBlur,children:\"Click Me! 2\"})]});};export default MyComponent;","map":{"version":3,"names":["Streamlit","useRenderData","React","useState","useCallback","jsx","_jsx","jsxs","_jsxs","MyComponent","renderData","_useState","_useState2","_slicedToArray","numClicks","setNumClicks","_useState3","_useState4","isFocused","setIsFocused","onClicked","newValue","setComponentValue","onFocus","onBlur","name","args","theme","style","borderStyling","concat","primaryColor","border","outline","children","onClick","disabled"],"sources":["/home/helektrika/Documents/dummy-component/component/frontend/src/MyComponent.tsx"],"sourcesContent":["import { Streamlit } from \"streamlit-component-lib\"\nimport { useRenderData } from \"./hook\"\nimport React, { useState, useCallback } from \"react\"\n\n/**\n * This is a React-based component template with functional component and hooks.\n */\nconst MyComponent: React.VFC = () => {\n  // \"useRenderData\" returns the renderData passed from Python.\n  const renderData = useRenderData()\n\n  const [numClicks, setNumClicks] = useState(0)\n  const [isFocused, setIsFocused] = useState(false)\n\n  /** Click handler for our \"Click Me!\" button. */\n  const onClicked = useCallback(() => {\n    // Increment `numClicks` state, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n    const newValue = numClicks + 1\n    setNumClicks(newValue)\n    Streamlit.setComponentValue(newValue)\n  }, [numClicks])\n\n  /** Focus handler for our \"Click Me!\" button. */\n  const onFocus = useCallback(() => {\n    setIsFocused(true)\n  }, [])\n\n  /** Blur handler for our \"Click Me!\" button. */\n  const onBlur = useCallback(() => {\n    setIsFocused(false)\n  }, [])\n\n  // Arguments that are passed to the plugin in Python are accessible\n  // via `renderData.args`. Here, we access the \"name\" arg.\n  const name = renderData.args[\"name\"]\n\n  // Streamlit sends us a theme object via renderData that we can use to ensure\n  // that our component has visuals that match the active theme in a\n  // streamlit app.\n  const theme = renderData.theme\n  const style: React.CSSProperties = {}\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (theme) {\n    // Use the theme object to style our button border. Alternatively, the\n    // theme style is defined in CSS vars.\n    const borderStyling = `1px solid ${isFocused ? theme.primaryColor : \"gray\"}`\n    style.border = borderStyling\n    style.outline = borderStyling\n  }\n\n  // Show a button and some text.\n  // When the button is clicked, we'll increment our \"numClicks\" state\n  // variable, and send its new value back to Streamlit, where it'll\n  // be available to the Python program.\n  return (\n    <span>\n      Hello, {name}! &nbsp;\n      <button\n        style={style}\n        onClick={onClicked}\n        disabled={renderData.disabled}\n        onFocus={onFocus}\n        onBlur={onBlur}\n      >\n        Click Me! 2\n      </button>\n    </span>\n  )\n}\n\nexport default MyComponent\n"],"mappings":"mJAAA,OAASA,SAAS,KAAQ,yBAAyB,CACnD,OAASC,aAAa,KAAQ,QAAQ,CACtC,MAAO,CAAAC,KAAK,EAAIC,QAAQ,CAAEC,WAAW,KAAQ,OAAO,CAEpD;AACA;AACA,GAFA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAGA,GAAM,CAAAC,WAAsB,CAAG,QAAzB,CAAAA,WAAsBA,CAAA,CAAS,CACnC;AACA,GAAM,CAAAC,UAAU,CAAGT,aAAa,CAAC,CAAC,CAElC,IAAAU,SAAA,CAAkCR,QAAQ,CAAC,CAAC,CAAC,CAAAS,UAAA,CAAAC,cAAA,CAAAF,SAAA,IAAtCG,SAAS,CAAAF,UAAA,IAAEG,YAAY,CAAAH,UAAA,IAC9B,IAAAI,UAAA,CAAkCb,QAAQ,CAAC,KAAK,CAAC,CAAAc,UAAA,CAAAJ,cAAA,CAAAG,UAAA,IAA1CE,SAAS,CAAAD,UAAA,IAAEE,YAAY,CAAAF,UAAA,IAE9B,gDACA,GAAM,CAAAG,SAAS,CAAGhB,WAAW,CAAC,UAAM,CAClC;AACA;AACA,GAAM,CAAAiB,QAAQ,CAAGP,SAAS,CAAG,CAAC,CAC9BC,YAAY,CAACM,QAAQ,CAAC,CACtBrB,SAAS,CAACsB,iBAAiB,CAACD,QAAQ,CAAC,CACvC,CAAC,CAAE,CAACP,SAAS,CAAC,CAAC,CAEf,gDACA,GAAM,CAAAS,OAAO,CAAGnB,WAAW,CAAC,UAAM,CAChCe,YAAY,CAAC,IAAI,CAAC,CACpB,CAAC,CAAE,EAAE,CAAC,CAEN,+CACA,GAAM,CAAAK,MAAM,CAAGpB,WAAW,CAAC,UAAM,CAC/Be,YAAY,CAAC,KAAK,CAAC,CACrB,CAAC,CAAE,EAAE,CAAC,CAEN;AACA;AACA,GAAM,CAAAM,IAAI,CAAGf,UAAU,CAACgB,IAAI,CAAC,MAAM,CAAC,CAEpC;AACA;AACA;AACA,GAAM,CAAAC,KAAK,CAAGjB,UAAU,CAACiB,KAAK,CAC9B,GAAM,CAAAC,KAA0B,CAAG,CAAC,CAAC,CAErC;AACA;AACA,GAAID,KAAK,CAAE,CACT;AACA;AACA,GAAM,CAAAE,aAAa,cAAAC,MAAA,CAAgBZ,SAAS,CAAGS,KAAK,CAACI,YAAY,CAAG,MAAM,CAAE,CAC5EH,KAAK,CAACI,MAAM,CAAGH,aAAa,CAC5BD,KAAK,CAACK,OAAO,CAAGJ,aAAa,CAC/B,CAEA;AACA;AACA;AACA;AACA,mBACErB,KAAA,SAAA0B,QAAA,EAAM,SACG,CAACT,IAAI,CAAC,QACb,cAAAnB,IAAA,WACEsB,KAAK,CAAEA,KAAM,CACbO,OAAO,CAAEf,SAAU,CACnBgB,QAAQ,CAAE1B,UAAU,CAAC0B,QAAS,CAC9Bb,OAAO,CAAEA,OAAQ,CACjBC,MAAM,CAAEA,MAAO,CAAAU,QAAA,CAChB,aAED,CAAQ,CAAC,EACL,CAAC,CAEX,CAAC,CAED,cAAe,CAAAzB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}